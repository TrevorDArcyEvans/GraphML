@page "/BrowseNodes/{RepositoryId}/{RepositoryName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject INodeServer _nodeServer
@inject IRepositoryServer _repoServer;
@inject IRepositoryManagerServer _repoMgrServer;
@inject NavigationManager _navMgr

<h1>Nodes</h1>
@if (_nodes == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(RepositoryName)</h2>
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Where Used</th>
      <th scope="col">Parents</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var node in _nodes)
    {
      <tr>
        <th>@node.Name</th>
        <th>
          <MatButton @onclick="@(e => GotoBrowseWhereUsed(node))" class="fas fa-question btn btn-primary"/>
        </th>
        <th>
          <MatButton @onclick="@(e => GotoBrowseParents(node))" class="fas fa-user-friends btn btn-primary"/>
        </th>
      </tr>
    }
    </tbody>
  </table>
  <div>
    <MatPaginator Length="@_totalEnts" PageSize="@_pageSize" Page="@OnPage"></MatPaginator>
  </div>
  <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseRepositories())">Back</MatButton>
}

@functions
{
  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  private IEnumerable<Node> _nodes;
  private RepositoryManager _repoMgr;
  int _totalEnts = 0;
  int _pageIndex = 0;
  int _pageSize = 25;

  protected override async Task OnInitializedAsync()
  {
    _totalEnts = await _nodeServer.Count(Guid.Parse(RepositoryId));
    _nodes = await _nodeServer.ByOwners(new[] {Guid.Parse(RepositoryId)}, _pageIndex, _pageSize);
    var repo = (await _repoServer.ByIds(new[] {Guid.Parse(RepositoryId)})).Single();
    _repoMgr = (await _repoMgrServer.ByIds(new[] {repo.RepositoryManagerId})).Single();
  }

  private async Task OnPage(MatPaginatorPageEvent e)
  {
    _pageSize = e.PageSize;
    _pageIndex = e.PageIndex;
    _nodes = await _nodeServer.ByOwners(new[] {Guid.Parse(RepositoryId)}, _pageIndex, _pageSize);
  }

  private void GotoBrowseRepositories()
  {
    _navMgr.NavigateTo($"/BrowseRepositories/{_repoMgr.Id}/{_repoMgr.Name}");
  }

  private void GotoBrowseWhereUsed(Item item)
  {
    _navMgr.NavigateTo($"/BrowseWhereUsedNodes/{item.Id}/{item.Name}");
  }

  private void GotoBrowseParents(Item item)
  {
    _navMgr.NavigateTo($"/BrowseParentNodes/{item.Id}/{item.Name}");
  }
}
