@page "/BrowseParentNodes/{ItemId}/{ItemName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IGraphServer _graphServer
@inject INodeServer _itemServer
@inject IRepositoryServer _repoServer;
@inject NavigationManager _navMgr

<h1>Parent Nodes</h1>
@if (_items == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(ItemName)</h2>
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in _items)
    {
      <tr>
        <th>@item.Name</th>
      </tr>
    }
    </tbody>
  </table>
  <div>
    <MatPaginator Length="@_totalEnts" PageSize="@_pageSize" Page="@OnPage"></MatPaginator>
  </div>
  <MatButton type="button" class="btn btn-primary" @onclick="@(e => GotoBrowseItems())">Back</MatButton>
}

@functions
{
  [Parameter]
  public string ItemName { get; set; }

  [Parameter]
  public string ItemId { get; set; }

  private IEnumerable<Item> _items;
  private Repository _repo;
  int _totalEnts = 0;
  int _pageIndex = 0;
  int _pageSize = 25;

  protected override async Task OnInitializedAsync()
  {
    _totalEnts = await _itemServer.Count(Guid.Parse(ItemId));
    var item = (await _itemServer.ByIds(new[] {Guid.Parse(ItemId)})).Single();
    _items = await _itemServer.GetParents(item, _pageIndex, _pageSize);
    _repo = (await _repoServer.ByIds(new[] {item.RepositoryId})).Single();
  }

  private async Task OnPage(MatPaginatorPageEvent e)
  {
    _pageSize = e.PageSize;
    _pageIndex = e.PageIndex;
    var item = (await _itemServer.ByIds(new[] {Guid.Parse(ItemId)})).Single();
    _items = await _itemServer.GetParents(item, _pageIndex, _pageSize);
  }

  private void GotoBrowseItems()
  {
    _navMgr.NavigateTo($"/BrowseNodes/{_repo.Id}/{_repo.Name}");
  }
}
