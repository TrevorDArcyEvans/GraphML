@page "/identityapi"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using GraphML.Interfaces.Server
@using Microsoft.Extensions.Configuration
@using GraphML.Common

@inject IHttpContextAccessor _httpContextAccessor
@inject IIdentityServer _identityServer
@inject IConfiguration _config

<b>User Claims from API</b>
<p/>

@if (_userClaimsJson == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <div>
    <p>These are the user claims that were presented to the API</p>
    <MatTextField Value="@_userClaimsJson" Label="User Claims" TextArea="true" FullWidth="true" ReadOnly="true" Style="height: 300px"/>
  </div>
  <div>
    <MatTextField Value="@_notBefore.ToString("O")" Label="Not Before" FullWidth="true" ReadOnly="true" />
  </div>
  <div>
    <MatTextField Value="@_expiry.ToString("O")" Label="Expiry" FullWidth="true" ReadOnly="true" />
  </div>
  <div>
    <MatTextField Value="@_authTime.ToString("O")" Label="AuthenticationBuilder Time" FullWidth="true" ReadOnly="true" />
  </div>
  <hr/>

  <div>
    <p>OIDC Information from <span style="font-family: monospace">IdentityServer/connect/userinfo</span></p>
    <pre> @_userInfo </pre>
  </div>
}

@code {
  private string _userClaimsJson;
  private string _userInfo;
  private DateTime _notBefore;
  private DateTime _expiry;
  private DateTime _authTime;

  protected override async Task OnInitializedAsync()
  {
    var claims = await _identityServer.GetAPIUserClaims();

    _notBefore = GetTime(claims, "nbf");
    _expiry = GetTime(claims, "exp");
    _authTime = GetTime(claims, "auth_time");
    _userClaimsJson = JsonConvert.SerializeObject(claims, Formatting.Indented, new LookupSerializer<string>());
    _userInfo = await GetUserInfo();
  }

  private async Task<string> GetUserInfo()
  {
    var accessToken = await _httpContextAccessor.HttpContext.GetTokenAsync("access_token");
    var handler = new HttpClientHandler
    {
      ServerCertificateCustomValidationCallback = delegate { return true; },
      UseDefaultCredentials = true
    };
    var client = new HttpClient(handler)
    {
      BaseAddress = new Uri(_config.IDENTITY_SERVER_BASE_URL())
    };
    client.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
    var response = await client.GetAsync($"/connect/userinfo");
    var userInfoStr = await response.Content.ReadAsStringAsync();
    var jObj = JObject.Parse(userInfoStr);
    var retval = JsonConvert.SerializeObject(jObj, Formatting.Indented);

    return retval;
  }

  private static DateTime GetTime(ILookup<string, string> data, string claim)
  {
    var str = data[claim].Single();
    var val = int.Parse(str);
    return DateTime.UnixEpoch.AddSeconds(val);
  }

}
