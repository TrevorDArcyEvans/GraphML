@page "/BrowseRepositories/{RepositoryManagerId}/{RepositoryManagerName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IRepositoryServer _repoServer
@inject IRepositoryManagerServer _repoMgrServer
@inject IOrganisationServer _orgServer
@inject NavigationManager _navMgr

<h1>Repositories</h1>
@if (_repos == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(RepositoryManagerName)</h2>
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Graphs</th>
      <th scope="col">Nodes</th>
      <th scope="col">Edges</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var repo in _repos)
    {
      <tr>
        <th>@repo.Name</th>
        <th>
          <MatButton Icon="multiline_chart" @onclick="@(e => GotoBrowseGraphs(repo))" />
        </th>
        <th>
          <MatButton Icon="notes" @onclick="@(e => GotoBrowseNodes(repo))" />
        </th>
        <th>
          <MatButton Icon="scatter_plot" @onclick="@(e => GotoBrowseEdges(repo))" />
        </th>
      </tr>
    }
    </tbody>
  </table>
  <div>
    <MatPaginator Length="@_totalEnts" PageSize="@_pageSize" Page="@OnPage"></MatPaginator>
  </div>
  <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseRepositoryManagers())">Back</MatButton>
}

@functions
{
  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  private IEnumerable<Repository> _repos;
  private Organisation _org;
  int _totalEnts = 0;
  int _pageIndex = 0;
  int _pageSize = 25;

  protected override async Task OnInitializedAsync()
  {
    _totalEnts = await _repoServer.Count(Guid.Parse(RepositoryManagerId));
    _repos = await _repoServer.ByOwners(new[] {Guid.Parse(RepositoryManagerId)}, _pageIndex, _pageSize);
    var repoMgr = (await _repoMgrServer.ByIds(new[] {Guid.Parse(RepositoryManagerId)})).Single();
    _org = (await _orgServer.ByIds(new[] {repoMgr.OrganisationId})).Single();
  }

  private async Task OnPage(MatPaginatorPageEvent e)
  {
    _pageSize = e.PageSize;
    _pageIndex = e.PageIndex;
    _repos = await _repoServer.ByOwners(new[] {Guid.Parse(RepositoryManagerId)}, _pageIndex, _pageSize);
  }

  private void GotoBrowseGraphs(Repository repo)
  {
    _navMgr.NavigateTo($"/BrowseGraphs/{repo.Id}/{repo.Name}");
  }

  private void GotoBrowseNodes(Repository repo)
  {
    _navMgr.NavigateTo($"/BrowseNodes/{repo.Id}/{repo.Name}");
  }

  private void GotoBrowseEdges(Repository repo)
  {
    _navMgr.NavigateTo($"/BrowseEdges/{repo.Id}/{repo.Name}");
  }

  private void GotoBrowseRepositoryManagers()
  {
    _navMgr.NavigateTo($"/BrowseRepositoryManagers/{_org.Id}/{_org.Name}");
  }
}
