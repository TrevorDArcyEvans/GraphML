@page "/BrowseContacts/{OrganisationId}/{OrganisationName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IContactServer _contactServer
@inject NavigationManager _navMgr

<h1>Contacts</h1>
@if (_contacts == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(@OrganisationName)</h2>
  <!-- TODO MatTable -->
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var contact in _contacts)
    {
      <tr>
        <th>@contact.Name</th>
      </tr>
    }
    </tbody>
    <div>
      <MatPaginator Length="@_totalEnts" PageSize="@_pageSize" Page="@OnPage"></MatPaginator>
    </div>
    <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseOrganisations())">Back</MatButton>
  </table>
}

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  private IEnumerable<Contact> _contacts;
  int _totalEnts = 0;
  int _pageIndex = 1;
  int _pageSize = 25;

  protected override async Task OnInitializedAsync()
  {
    _totalEnts = await _contactServer.Count(Guid.Parse(OrganisationId));
    _contacts = await _contactServer.ByOwners(new[] { Guid.Parse(OrganisationId) }, _pageIndex, _pageSize);
  }

  private async Task OnPage(MatPaginatorPageEvent e)
  {
    _pageSize = e.PageSize;
    _pageIndex = e.PageIndex;
    _contacts = await _contactServer.ByOwners(new[] { Guid.Parse(OrganisationId) }, _pageIndex, _pageSize);
  }

  private void GotoBrowseOrganisations()
  {
    _navMgr.NavigateTo($"/BrowseOrganisations");
  }
}
