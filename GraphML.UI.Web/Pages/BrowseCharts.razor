@page "/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}"

@using GraphML
@using GraphML.Common
@using Microsoft.Extensions.Configuration
@using Flurl
@using GraphML.API.Controllers
@using System.Web;
@using Humanizer

@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Charts</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName)</h4>

<MatTable
  Items="@_charts"
  ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(Chart), nameof(ChartController.ByOwner), GraphId)"
  PageParamName="pageIndex"
  PageSizeParamName="pageSize"
  PagingRecordsCountPropertyName="@nameof(PagedDataEx<GraphNode>.TotalCount).Camelize()"
  PagingDataPropertyName="@nameof(PagedDataEx<GraphNode>.Items).Camelize()"
  FilterByColumnName="@nameof(GraphNode.Name)"
  Striped="true"
  AllowSelection="true"
  class="mat-elevation-z5">
  <MatTableHeader>
    <th>Name</th>
  </MatTableHeader>
  <MatTableRow>
    <td>@context.Name</td>
  </MatTableRow>
</MatTable>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseGraphs())">Back</MatButton>

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  private Chart[] _charts;

  private void GotoBrowseGraphs()
  {
    _navMgr.NavigateTo($"/BrowseGraphs/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}");
  }
}
