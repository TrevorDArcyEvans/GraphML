@page "/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}"

@using GraphML
@using GraphML.Common
@using Microsoft.Extensions.Configuration
@using Flurl
@using GraphML.API.Controllers
@using System.Web;
@using GraphML.Interfaces.Server
@using Humanizer

@inject IChartServer _chartServer
@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Charts</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName)</h4>

<MatTable
  Items="@_charts"
  ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(Chart), nameof(ChartController.ByOwner), GraphId)"
  PageParamName="pageIndex"
  PageSizeParamName="pageSize"
  PagingRecordsCountPropertyName="@nameof(PagedDataEx<GraphNode>.TotalCount).Camelize()"
  PagingDataPropertyName="@nameof(PagedDataEx<GraphNode>.Items).Camelize()"
  FilterByColumnName="@nameof(GraphNode.Name)"
  Striped="true"
  AllowSelection="true"
  class="mat-elevation-z5">
  <MatTableHeader>
    <th>Name</th>
  </MatTableHeader>
  <MatTableRow>
    <td>
      <MatButton Label="@context.Name" @onclick="@(e => GotoShowChart(@context))"></MatButton>
    </td>
    <td>
      <MatButton Icon="delete" @onclick="@(e => ConfirmDeleteChart(@context))"></MatButton>
    </td>
  </MatTableRow>
</MatTable>

<div>
  <MatDialog @bind-IsOpen="@_deleteDialogIsOpen">
    <MatDialogTitle>Delete chart?</MatDialogTitle>
    <MatDialogActions>
      <MatButton OnClick="@(e => { _deleteChart = null; _deleteDialogIsOpen = false; })">Cancel</MatButton>
      <MatButton OnClick="@DeleteChart">OK</MatButton>
    </MatDialogActions>
  </MatDialog>
</div>

<div>
  <MatButton OnClick="@NewDialog" Raised="true">New chart...</MatButton>
  <MatDialog @bind-IsOpen="@_newDialogIsOpen">
    <MatDialogTitle>Create new chart</MatDialogTitle>
    <MatDialogContent>
      <MatTextField @bind-Value="@_dlgNewChartName"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
      <MatButton OnClick="@(e => { _newDialogIsOpen = false; })">Cancel</MatButton>
      <MatButton OnClick="@OkClick">OK</MatButton>
    </MatDialogActions>
  </MatDialog>
</div>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseGraphs())">Back</MatButton>

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  private Chart[] _charts;

  private bool _newDialogIsOpen;
  private string _newChartName;
  private string _dlgNewChartName;
  
  private bool _deleteDialogIsOpen;
  private Chart _deleteChart;
  
  private void NewDialog()
  {
    _dlgNewChartName = null;
    _newDialogIsOpen = true;
  }

  private async Task OkClick()
  {
    if (string.IsNullOrWhiteSpace(_dlgNewChartName))
    {
      return;
    }
    
    _newChartName = _dlgNewChartName;
    _newDialogIsOpen = false;
    var newChart = await CreateNewChart(_newChartName);
    GotoShowChart(newChart);
  }

  private async Task<Chart> CreateNewChart(string chartName)
  {
    var newChart = new Chart(Guid.Parse(GraphId), Guid.Parse(OrganisationId), chartName);
    var newCharts = await _chartServer.Create(new[] { newChart });
    
    return newCharts.Single();
  }

  private void ConfirmDeleteChart(Chart chart)
  {
    _deleteChart = chart;
    _deleteDialogIsOpen = true;
  }

  private async Task DeleteChart()
  {
    _deleteDialogIsOpen = false;
    await _chartServer.Delete(new[] { _deleteChart });
    StateHasChanged();
  }

  private void GotoShowChart(Chart chart)
  {
    _navMgr.NavigateTo($"/ShowChart/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{chart.Id}/{chart.Name}");
  }

  private void GotoBrowseGraphs()
  {
    _navMgr.NavigateTo($"/BrowseGraphs/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}");
  }
}
