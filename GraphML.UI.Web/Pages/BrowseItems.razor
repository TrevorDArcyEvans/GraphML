@page "/BrowseItems/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}"

@using GraphML
@using GraphML.Common
@using Microsoft.Extensions.Configuration
@using Flurl
@using GraphML.API.Controllers
@using System.Web;

@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Browse Items</h1>

<MatTabGroup>
  <MatTab Label="Nodes">
    <MatTable
      Items="@_nodes"
      ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(Node), nameof(NodeController.ByOwner), RepositoryId)"
      PageParamName="pageIndex"
      PageSizeParamName="pageSize"
      Striped="true"
      AllowSelection="true"
      class="mat-elevation-z5">
      <MatTableHeader>
        <th>Name</th>
        <th>Where Used</th>
        <th>Parents</th>
      </MatTableHeader>
      <MatTableRow>
        <td>@context.Name</td>
        <td>
          <MatButton Icon="question_answer" @onclick="@(e => GotoBrowseWhereUsed(@context))"/>
        </td>
        <td>
          <MatButton Icon="bubble_chart" @onclick="@(e => GotoBrowseParents(@context))"/>
        </td>
      </MatTableRow>
    </MatTable>
  </MatTab>
  <MatTab Label="Edges">
    <MatTable
      Items="@_edges"
      ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(Edge), nameof(EdgeController.ByOwner), RepositoryId)"
      PageParamName="pageIndex"
      PageSizeParamName="pageSize"
      Striped="true"
      AllowSelection="true"
      class="mat-elevation-z5">
      <MatTableHeader>
        <th>Name</th>
        <th>Where Used</th>
        <th>Parents</th>
      </MatTableHeader>
      <MatTableRow>
        <td>@context.Name</td>
        <td>
          <MatButton Icon="question_answer" @onclick="@(e => GotoBrowseWhereUsed(@context))"/>
        </td>
        <td>
          <MatButton Icon="bubble_chart" @onclick="@(e => GotoBrowseParents(@context))"/>
        </td>
      </MatTableRow>
    </MatTable>
  </MatTab>
</MatTabGroup>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseRepositories())">Back</MatButton>

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  private Node[] _nodes;
  private Edge[] _edges;

  private void GotoBrowseWhereUsed(Node item)
  {
    _navMgr.NavigateTo($"/BrowseWhereUsedNodes/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{item.Id}/{item.Name}");
  }

  private void GotoBrowseParents(Node item)
  {
    _navMgr.NavigateTo($"/BrowseParentNodes/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{item.Id}/{item.Name}");
  }

  private void GotoBrowseWhereUsed(Edge item)
  {
    _navMgr.NavigateTo($"/BrowseWhereUsedEdges/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{item.Id}/{item.Name}");
  }

  private void GotoBrowseParents(Edge item)
  {
    _navMgr.NavigateTo($"/BrowseParentEdges/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{item.Id}/{item.Name}");
  }

  private void GotoBrowseRepositories()
  {
    _navMgr.NavigateTo($"/BrowseRepositories/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}");
  }
}
