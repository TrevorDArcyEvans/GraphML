@page "/BrowseGraphs/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}"

@using GraphML
@using GraphML.Common
@using Microsoft.Extensions.Configuration
@using Flurl
@using GraphML.API.Controllers
@using System.Web;
@using Humanizer

@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Graphs</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName)</h4>

<MatTable
  Items="@_graphs"
  ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(Graph), nameof(GraphController.ByOwner), RepositoryId)"
  PageParamName="pageIndex"
  PageSizeParamName="pageSize"
  PagingRecordsCountPropertyName="@nameof(PagedDataEx<Graph>.TotalCount).Camelize()"
  PagingDataPropertyName="@nameof(PagedDataEx<Graph>.Items).Camelize()"
  FilterByColumnName="@nameof(Graph.Name)"
  Striped="true"
  AllowSelection="true"
  class="mat-elevation-z5">
  <MatTableHeader>
    <th>Name</th>
    <th>Graphs Items</th>
    <th>Charts</th>
    <th>Analyses</th>
    <th>Results</th>
  </MatTableHeader>
  <MatTableRow>
    <td>@context.Name</td>
    <td>
      <MatButton Icon="vertical_split" @onclick="@(e => GotoBrowseGraphItems(@context))"/>
    </td>
    <td>
      <MatButton Icon="file_copy" @onclick="@(e => GotoBrowseCharts(@context))"/>
    </td>
    <td>
      <MatButton Icon="functions" @onclick="@(e => GotoBrowseAnalyses(@context))"/>
    </td>
    <td>
      <MatButton Icon="assignment_turned_in" @onclick="@(e => GotoBrowseResults(@context))"/>
    </td>
  </MatTableRow>
</MatTable>
<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseRepositories())">Back</MatButton>

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  private Graph[] _graphs;

  private void GotoBrowseGraphItems(Graph graph)
  {
    _navMgr.NavigateTo($"/BrowseGraphItems/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseCharts(Graph graph)
  {
    _navMgr.NavigateTo($"/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseAnalyses(Graph graph)
  {
    _navMgr.NavigateTo($"/BrowseAnalyses/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseResults(Graph graph)
  {
    _navMgr.NavigateTo($"/BrowseResults/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseRepositories()
  {
    _navMgr.NavigateTo($"/BrowseRepositories/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}");
  }
}
