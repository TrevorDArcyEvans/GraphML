@page "/BrowseGraphs/{RepositoryId}/{RepositoryName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IGraphServer _graphServer
@inject IRepositoryServer _repoServer;
@inject IRepositoryManagerServer _repoMgrServer;
@inject NavigationManager UriHelper

<h1>Graphs</h1>
@if (_graphs == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <h2>@HttpUtility.UrlDecode(RepositoryName)</h2>
  <table class="table">
    <thead class="thead-dark">
      <tr>
        <th scope="col">Name</th>
        <th scope="col">Graph Nodes</th>
        <th scope="col">Graph Edges</th>
        <th scope="col">Analysis</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var graph in _graphs)
      {
        <tr>
          <th>@graph.Name</th>
          <th><span @onclick="@(e => GotoBrowseGraphNodes(graph))" class="fas fa-genderless" /></th>
          <th><span @onclick="@(e => GotoBrowseGraphEdges(graph))" class="fas fa-grip-lines-vertical" /></th>
          <th><span @onclick="@(e => GotoBrowseAnalyses(graph))" class="fas fa-calculator" /></th>
        </tr>
      }
    </tbody>
  </table>
  <button type="button" class="btn btn-primary" @onclick="@(e => GotoBrowseRepositories())">Back</button>
}

  @functions
  {
  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  private IEnumerable<Graph> _graphs;
  private RepositoryManager _repoMgr;

  protected override async Task OnInitializedAsync()
  {
    _graphs = await _graphServer.ByOwners(new[] { Guid.Parse(RepositoryId) });
    var repo = (await _repoServer.ByIds(new[] { Guid.Parse(RepositoryId) })).Single();
    _repoMgr = (await _repoMgrServer.ByIds(new [] { repo.RepositoryManagerId})).Single();
  }

  private void GotoBrowseGraphNodes(Graph graph)
  {
    UriHelper.NavigateTo($"/BrowseGraphNodes/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseGraphEdges(Graph graph)
  {
    UriHelper.NavigateTo($"/BrowseGraphEdges/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseAnalyses(Graph graph)
  {
    UriHelper.NavigateTo($"/BrowseAnalyses/{graph.Id}/{graph.Name}");
  }

  private void GotoBrowseRepositories()
  {
    UriHelper.NavigateTo($"/BrowseRepositories/{_repoMgr.Id}/{_repoMgr.Name}");
  }
}
