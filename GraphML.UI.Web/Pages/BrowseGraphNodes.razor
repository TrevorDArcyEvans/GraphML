@page "/BrowseGraphNodes/{GraphId}/{GraphName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IGraphNodeServer _nodeServer
@inject IGraphServer _graphServer;
@inject IRepositoryServer _repoServer;
@inject NavigationManager _navMgr

<h1>Graph Nodes</h1>
@if (_nodes == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(GraphName)</h2>
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var node in _nodes)
    {
      <tr>
        <th>@node.Name</th>
      </tr>
    }
    </tbody>
  </table>
  <MatButton type="button" class="btn btn-primary" @onclick="@(e => GotoBrowseGraphs())">Back</MatButton>
}

@functions
{
  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  private IEnumerable<GraphNode> _nodes;
  private Repository _repo;

  protected override async Task OnInitializedAsync()
  {
    _nodes = await _nodeServer.ByOwners(new[] {Guid.Parse(GraphId)}, 1, 20); //TODO paging
    var graph = (await _graphServer.ByIds(new[] {Guid.Parse(GraphId)})).Single();
    _repo = (await _repoServer.ByIds(new[] {graph.RepositoryId})).Single();
  }

  private void GotoBrowseGraphs()
  {
    _navMgr.NavigateTo($"/BrowseGraphs/{_repo.Id}/{_repo.Name}");
  }
}
