@page "/ShowChart/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{ChartId}/{ChartName}"

@using GraphML
@using Microsoft.Extensions.Configuration
@using System.Web;

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components
@using Flurl
@using GraphML.API.Controllers
@using GraphML.Common
@using GraphML.Interfaces.Porcelain
@using GraphML.Interfaces.Server
@using Humanizer

@inject IBlazorContextMenuService _contextMenuService
@inject INodeServer _nodeServer
@inject IEdgeServer _edgeServer
@inject IGraphNodeServer _graphNodeServer
@inject IGraphEdgeServer _graphEdgeServer
@inject IChartNodeServer _chartNodeServer
@inject IChartEdgeServer _chartEdgeServer
@inject IChartExServer _chartExServer
@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Chart</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName) / @HttpUtility.UrlDecode(ChartName)</h4>

<div class="diagram-container row h-100 v-100">

  <div class="col-4">
    <MatTable
      Items="@_graphNodes"
      ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(GraphNode), nameof(GraphNodeController.ByOwner), GraphId)"
      PageParamName="pageIndex"
      PageSizeParamName="pageSize"
      PagingRecordsCountPropertyName="@nameof(PagedDataEx<GraphNode>.TotalCount).Camelize()"
      PagingDataPropertyName="@nameof(PagedDataEx<GraphNode>.Items).Camelize()"
      FilterByColumnName="@nameof(GraphNode.Name)"
      Striped="true"
      AllowSelection="true"
      class="mat-elevation-z5">
      <MatTableHeader>
        <th>Name</th>
      </MatTableHeader>
      <MatTableRow>
        @{
          var id = @context.Id;
          <td draggable="true" @ondragstart="@(() => OnDragStart(@id))">@context.Name</td>
        }
      </MatTableRow>
    </MatTable>
  </div>

  <!--
  Parent of DiagramCanvas has to have a fixed width/height
  or it will not be rendered.

  100vw = 100% viewport width
  100vh = 100% viewport height
  -->
  <div class="col-8" oncontextmenu="return false;" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
    <CascadingValue Value="_diagram">
      <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
  </div>

</div>

<div>
  <MatButton Icon="save" @onclick="@(e => OnSave())"/>
</div>
<div>
  <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseCharts())">Back</MatButton>
</div>

<ContextMenu Id="NodeContextMenu" CssClass="z-10" AutoHide="true">
  <Item OnClick="@OnExpandNode">Expand node</Item>
  <Item OnClick="@OnShowParentChild">Show parent/child...</Item>
</ContextMenu>

<div>
  <MatDialog @bind-IsOpen="@_parentChildDialogIsOpen" CanBeClosed="true">
    <MatDialogTitle>Parent/Child Nodes</MatDialogTitle>
    <MatDialogContent>
      <hr/>
      <div>
        <b>Parents:</b><br/>
        <MatTable
          Items="@_parentNodes"
          FilterByColumnName="@nameof(Node.Name)"
          Striped="true"
          AllowSelection="true"
          class="mat-elevation-z5">
          <MatTableHeader>
            <th>Name</th>
          </MatTableHeader>
          <MatTableRow>
            <td>@context.Name</td>
          </MatTableRow>
        </MatTable>
      </div>
      <hr/>
      <div>
        <b>Selected node: </b> @_selectedNode?.Name
      </div>
      <hr/>
      <div>
        <b>Child node: </b> @_childNode?.Name
      </div>
    </MatDialogContent>
    <MatDialogActions>
      <MatButton OnClick="@(e => { _parentChildDialogIsOpen = false; })">OK</MatButton>
    </MatDialogActions>
  </MatDialog>
</div>
