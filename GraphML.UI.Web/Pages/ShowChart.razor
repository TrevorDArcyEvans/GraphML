@page "/ShowChart/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{ChartId}/{ChartName}"

@using GraphML
@using Microsoft.Extensions.Configuration
@using System.Web;
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components
@using GraphML.Interfaces.Porcelain
@using GraphML.Porcelain
@using GraphML.UI.Web.Widgets

@inject IChartExServer _chartExServer
@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Chart</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName) / @HttpUtility.UrlDecode(ChartName)</h4>

<!--
Parent of DiagramCanvas has to have a fixed width/height
or it will not be rendered.

100vw = 100% viewport width
100vh = 100% viewport height
-->
<div style="width:100vw; height: 100vh">
  <CascadingValue Value="Diagram">
    <DiagramCanvas></DiagramCanvas>
  </CascadingValue>
</div>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseCharts())">Back</MatButton>

@code
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  [Parameter]
  public string ChartName { get; set; }

  [Parameter]
  public string ChartId { get; set; }

  private Diagram Diagram { get; set; }

  protected override async void OnInitialized()
  {
    base.OnInitialized();

    var options = new DiagramOptions
    {
      DeleteKey = "Delete", // What key deletes the selected nodes/links
      DefaultNodeComponent = null, // Default component for nodes
      AllowMultiSelection = true, // Whether to allow multi selection using CTRL
      Links = new DiagramLinkOptions
      {
      },
      Zoom = new DiagramZoomOptions
      {
        Minimum = 0.5, // Minimum zoom value
        Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
      }
    };
    Diagram = new Diagram(options);
    
    Diagram.RegisterModelComponent<ItemNode, ItemNodeWidget>();

    var chart = await _chartExServer.ById(Guid.Parse(ChartId));
    Setup(chart);
  }

  private void Setup(ChartEx chart)
  {
    var nodes = chart.Nodes.Select(n => 
      new ItemNode (n.RepositoryItemId.ToString(), n.Name, new Point(n.X, n.Y)));
    Diagram.Nodes.Add(nodes);

    var links = chart.Edges.Select(edge =>
    {
      var source = Diagram.Nodes.Single(n => n.Id == edge.SourceId.ToString());
      var target = Diagram.Nodes.Single(n => n.Id == edge.TargetId.ToString());
      var link = new LinkModel(source, target);
      return link;
    });
    Diagram.Links.Add(links);
  }

  private void GotoBrowseCharts()
  {
    _navMgr.NavigateTo($"/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}");
  }
}
