@page "/ShowChart/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{ChartId}/{ChartName}"

@using GraphML
@using System.Web;

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components

@using Flurl
@using GraphML.API.Controllers
@using GraphML.Common
@using Humanizer
@using QuikGraph

<h4>Chart</h4>
<h6>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName) / @HttpUtility.UrlDecode(ChartName)</h6>


<div class="diagram-container row h-100 v-100">

  <MatDrawerContainer Style="width: 100vw; height: 100vh;">
    <MatDrawer @bind-Opened="@_opened">
      <MatTable
        Items="@_graphNodes"
        ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(GraphNode), nameof(GraphNodeController.ByOwner), GraphId)"
        PageParamName="pageIndex"
        PageSizeParamName="pageSize"
        PagingRecordsCountPropertyName="@nameof(PagedDataEx<GraphNode>.TotalCount).Camelize()"
        PagingDataPropertyName="@nameof(PagedDataEx<GraphNode>.Items).Camelize()"
        FilterByColumnName="@nameof(GraphNode.Name)"
        Striped="true"
        AllowSelection="true"
        class="mat-elevation-z5">
        <MatTableHeader>
          <th>Name</th>
        </MatTableHeader>
        <MatTableRow>
          @{
            var id = @context.Id;
            <td draggable="true" @ondragstart="@(() => OnDragStart(@id))">@context.Name</td>
          }
        </MatTableRow>
      </MatTable>
    </MatDrawer>
    <MatDrawerContent class="diagram-container row h-100 v-100">
      <div>
        <MatButton Icon=@(_opened ? "chevron_left" : "chevron_right") OnClick="@((e) => ButtonClicked())" Raised="true"/>
      </div>

      <!--
      Parent of DiagramCanvas has to have a fixed width/height
      or it will not be rendered.

      100vw = 100% viewport width
      100vh = 100% viewport height
      -->
      <div class="col-8" oncontextmenu="return false;" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
        <CascadingValue Value="_diagram">
          <DiagramCanvas></DiagramCanvas>
        </CascadingValue>
      </div>
    </MatDrawerContent>
  </MatDrawerContainer>

</div>


<div>
  <MatSelect Label="Layout chart" @bind-Value="@_layout" Style="width: 125px">
    @foreach (var algo in new GraphShape.Algorithms.Layout.StandardLayoutAlgorithmFactory<string, IEdge<string>, IBidirectionalGraph<string, IEdge<string>>>().AlgorithmTypes)
    {
      <MatOption TValue="string" Value="@algo">@algo</MatOption>
    }
  </MatSelect>

  <MatButton Icon="grid_on" @onclick="@(e => OnLayout(_layout))" Raised="true">Go!</MatButton>
</div>

<div>
  <MatButton Icon="save" @onclick="@(e => OnSave())"/>
</div>
<div>
  <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseCharts())">Back</MatButton>
</div>

<ContextMenu Id="NodeContextMenu" CssClass="z-10" AutoHide="true">
  <Item OnClick="@OnExpandNode">Expand node</Item>
  <Item OnClick="@OnShowParentChild">Show parent/child...</Item>
</ContextMenu>

<div>
  <MatDialog @bind-IsOpen="@_parentChildDialogIsOpen" CanBeClosed="true">
    <MatDialogTitle>Parent/Child Nodes</MatDialogTitle>
    <MatDialogContent>
      <hr/>
      <div>
        <b>Parents:</b><br/>
        <MatTable
          Items="@_parentNodes"
          FilterByColumnName="@nameof(Node.Name)"
          Striped="true"
          AllowSelection="true"
          class="mat-elevation-z5">
          <MatTableHeader>
            <th>Name</th>
          </MatTableHeader>
          <MatTableRow>
            <td>@context.Name</td>
          </MatTableRow>
        </MatTable>
      </div>
      <hr/>
      <div>
        <b>Selected node: </b> @_selectedNode?.Name
      </div>
      <hr/>
      <div>
        <b>Child node: </b> @_childNode?.Name
      </div>
    </MatDialogContent>
    <MatDialogActions>
      <MatButton OnClick="@(e => { _parentChildDialogIsOpen = false; })">OK</MatButton>
    </MatDialogActions>
  </MatDialog>
</div>

@code
{
  private bool _opened = true;

  private void ButtonClicked()
  {
    _opened = !_opened;
  }
}
