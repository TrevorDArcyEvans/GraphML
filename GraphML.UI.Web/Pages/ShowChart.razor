@page "/ShowChart/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{ChartId}/{ChartName}"

@using GraphML
@using Microsoft.Extensions.Configuration
@using System.Web;
@using Blazor.Diagrams.Core
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models

<!-- required to resolve DiagramCanvas component -->
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Models.Base
@using Flurl
@using GraphML.API.Controllers
@using GraphML.Common
@using GraphML.Interfaces.Porcelain
@using GraphML.Interfaces.Server
@using GraphML.Porcelain
@using GraphML.UI.Web.Models
@using GraphML.UI.Web.Widgets
@using Humanizer

@inject IBlazorContextMenuService _contextMenuService
@inject INodeServer _nodeServer
@inject IChartExServer _chartExServer
@inject IConfiguration _config
@inject NavigationManager _navMgr

<h1>Chart</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName) / @HttpUtility.UrlDecode(ChartName)</h4>

<div class="diagram-container row h-100 v-100">

  <div class="col-4">
    <MatTable
      Items="@_graphNodes"
      ApiUrl="@Url.Combine(@_config.API_URI(), "api", nameof(GraphNode), nameof(GraphNodeController.ByOwner), GraphId)"
      PageParamName="pageIndex"
      PageSizeParamName="pageSize"
      PagingRecordsCountPropertyName="@nameof(PagedDataEx<GraphNode>.TotalCount).Camelize()"
      PagingDataPropertyName="@nameof(PagedDataEx<GraphNode>.Items).Camelize()"
      FilterByColumnName="@nameof(GraphNode.Name)"
      Striped="true"
      AllowSelection="true"
      class="mat-elevation-z5">
      <MatTableHeader>
        <th>Name</th>
      </MatTableHeader>
      <MatTableRow>
        @{
          var id = @context.RepositoryItemId.ToString();
          <td draggable="true" @ondragstart="@(() => OnDragStart(@id))">@context.Name</td>
        }
      </MatTableRow>
    </MatTable>
  </div>

  <!--
  Parent of DiagramCanvas has to have a fixed width/height
  or it will not be rendered.

  100vw = 100% viewport width
  100vh = 100% viewport height
  -->
  <div class="col-8" oncontextmenu="return false;" ondragover="event.preventDefault();" @ondragover:preventDefault @ondrop="OnDrop">
    <CascadingValue Value="_diagram">
      <DiagramCanvas></DiagramCanvas>
    </CascadingValue>
  </div>

</div>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseCharts())">Back</MatButton>

<ContextMenu Id="NodeContextMenu" CssClass="z-10" AutoHide="true">
  <Item OnClick="@OnExpandNode">Expand node</Item>
</ContextMenu>

@code
{
  #region Parameters

  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  [Parameter]
  public string ChartName { get; set; }

  [Parameter]
  public string ChartId { get; set; }

  #endregion

  private Diagram _diagram { get; set; }
  private GraphNode[] _graphNodes;
  private string _draggedNodeId;

  protected override async void OnInitialized()
  {
    base.OnInitialized();

    var options = new DiagramOptions
    {
      DeleteKey = "Delete", // What key deletes the selected nodes/links
      DefaultNodeComponent = null, // Default component for nodes
      AllowMultiSelection = true, // Whether to allow multi selection using CTRL
      Links = new DiagramLinkOptions
      {
      },
      Zoom = new DiagramZoomOptions
      {
        Minimum = 0.5, // Minimum zoom value
        Inverse = false, // Whether to inverse the direction of the zoom when using the wheel
      }
    };
    _diagram = new Diagram(options);
    _diagram.MouseClick += Diagram_OnMouseClick;

    _diagram.RegisterModelComponent<ItemNode, ItemNodeWidget>();

    var chart = await _chartExServer.ById(Guid.Parse(ChartId));
    Setup(chart);
  }

  private void Diagram_OnMouseClick(Model model, MouseEventArgs eventArgs)
  {
    if (eventArgs.Button == 2 &&
        model is ItemNode itemNode)
    {
      _contextMenuService.ShowMenu("NodeContextMenu", (int) eventArgs.ClientX, (int) eventArgs.ClientY);
    }
  }

  private void Setup(ChartEx chart)
  {
    var nodes = chart.Nodes.Select(n =>
      new ItemNode(n.RepositoryItemId.ToString(), n.Name, new Point(n.X, n.Y)));
    _diagram.Nodes.Add(nodes);

    var links = chart.Edges.Select(edge =>
    {
      var source = _diagram.Nodes.Single(n => n.Id == edge.SourceId.ToString());
      var target = _diagram.Nodes.Single(n => n.Id == edge.TargetId.ToString());
      var link = new LinkModel(source, target)
      {
        TargetMarker = chart.Directed ? LinkMarker.Arrow : null
      };
      link.Labels.Add(new LinkLabelModel(link, edge.Name));
      return link;
    });
    _diagram.Links.Add(links);
  }

  private void OnDragStart(string draggedNode)
  {
  // Can also use transferData, but this is probably "faster"
    _draggedNodeId = draggedNode;
  }

  private async Task OnDrop(DragEventArgs e)
  {
    if (_draggedNodeId == Guid.Empty.ToString())
    {
  // nothing selected
      return;
    }

    if (_diagram.Nodes.OfType<ItemNode>().Any(n => n.Id == _draggedNodeId))
    {
  // node already on chart
      return;
    }

    var draggedNode = (await _nodeServer.ByIds(new[] { Guid.Parse(_draggedNodeId) })).Single();
    var position = _diagram.GetRelativeMousePoint(e.ClientX, e.ClientY);
    var node = new ItemNode(draggedNode.Id.ToString(), draggedNode.Name, position);
    _diagram.Nodes.Add(node);

    _draggedNodeId = Guid.Empty.ToString();
  }

  private void OnExpandNode(ItemClickEventArgs e)
  {
    // TODO   expand node
    var selNode = _diagram.GetSelectedModels().OfType<ItemNode>().Single();
    Console.WriteLine($"Selected node: {selNode.Name} IsCanceled: {e.IsCanceled}");
  }

  private void GotoBrowseCharts()
  {
    _navMgr.NavigateTo($"/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}");
  }
}
