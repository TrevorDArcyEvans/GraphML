@page "/ShowTimeLine/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}/{ChartId}/{ChartName}"

@using System.Web;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Enums
@using ChartJs.Blazor.Common.Time
@using ChartJs.Blazor.GanttChart
@using ChartJs.Blazor.GanttChart.Axes
@using ChartJs.Blazor.Util

<b>Time Line</b>&nbsp;&nbsp;

<span class="bread-crumb-trail">
  <Breadcrumb>
    <BreadcrumbItem>
      <BreadcrumbLink To="/BrowseOrganisations">Organisations</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
      <BreadcrumbLink To="@($"/BrowseRepositoryManagers/{OrganisationId}/{OrganisationName}")">@HttpUtility.UrlDecode(@OrganisationName)</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
      <BreadcrumbLink To="@($"/BrowseRepositories/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}")">@HttpUtility.UrlDecode(@RepositoryManagerName)</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
      <BreadcrumbLink To="@($"/BrowseGraphs/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}")">@HttpUtility.UrlDecode(@RepositoryName)</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem>
      <BreadcrumbLink To="@($"/BrowseCharts/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}")">@HttpUtility.UrlDecode(@GraphName)</BreadcrumbLink>
    </BreadcrumbItem>
    <BreadcrumbItem Active="true">
      <BreadcrumbLink To="#">@HttpUtility.UrlDecode(@ChartName)</BreadcrumbLink>
    </BreadcrumbItem>
  </Breadcrumb>
</span>

<ChartJs.Blazor.Chart Config="_config" @ref="_chart"></ChartJs.Blazor.Chart>

@code {
  private GanttConfig _config;
  private Chart _chart;

  protected override void OnInitialized()
  {
    _config = new GanttConfig
    {
      Options = new GanttOptions
      {
        Responsive = true,
        Legend = new Legend
        {
          Position = Position.Right
        },
        Title = new OptionsTitle
        {
          Display = true,
          Text = "ChartJs.Blazor Gantt Time Chart"
        },
        Scales = new GanttScales
        {
          XAxes = new List<GanttTimeAxis>(
            new[]
            {
              new GanttTimeAxis
              {
                Display = AxisDisplay.True,
                Position = Position.Bottom,
                Time = new TimeOptions
                {
                  DisplayFormats = new Dictionary<TimeMeasurement, string>
                  {
                    { TimeMeasurement.Millisecond, "HH:mm:ss.SSS" },
                    { TimeMeasurement.Second, "HH:mm:ss" },
                    { TimeMeasurement.Minute, "HH:mm:ss" },
                    { TimeMeasurement.Hour, "HH:mm:ss" },
                    { TimeMeasurement.Day, "HH:mm:ss" },
                  }
                }
              }
            })
        }
      }
    };

    var data = new List<GanttDateTimeData>(
      new[]
      {
        new GanttDateTimeData
        {
          X = new GanttDateTimeInterval
          {
            From = new DateTime(2006, 2, 20, 6, 3, 30),
            To = new DateTime(2006, 2, 20, 8, 15, 30)
          },
          Y = 0.3
        },
        new GanttDateTimeData
        {
          X = new GanttDateTimeInterval
          {
            From = new DateTime(2006, 2, 20, 12, 30, 30),
            To = new DateTime(2006, 2, 20, 13, 35, 30)
          },
          Y = 0.5
        }
      });
    IDataset<GanttDateTimeData> dataset1 = new GanttDateTimeDataset(data)
    {
      Label = "My first dataset",
      BackgroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.FromArgb(128, ChartColors.Red)),
      BorderColor = ColorUtil.FromDrawingColor(ChartColors.Red),
      BorderWidth = 1,
      Width = "1ms"
    };

    _config.Data.Datasets.Add(dataset1);
  }

  public static class ChartColors
  {
    public static readonly System.Drawing.Color Red = System.Drawing.Color.FromArgb(255, 99, 132);
  }

}
