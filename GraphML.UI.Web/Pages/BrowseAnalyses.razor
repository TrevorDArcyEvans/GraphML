@page "/BrowseAnalyses/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}/{GraphId}/{GraphName}"

@using Analysis.RankedShortestPath
@using Analysis.SNA.Centrality
@using System.Web;
@using GraphML.API.Server;

@inject IAnalysisServer _analysisServer
@inject NavigationManager _navMgr

<h1>Analyses</h1>
<h4>@HttpUtility.UrlDecode(OrganisationName) / @HttpUtility.UrlDecode(RepositoryManagerName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(RepositoryName) / @HttpUtility.UrlDecode(GraphName)</h4>

<MatAccordion Multi="true">
  <MatExpansionPanel>
    <MatExpansionPanelSummary>
      <MatExpansionPanelHeader>Find Shortest Paths</MatExpansionPanelHeader>
    </MatExpansionPanelSummary>
    <MatExpansionPanelDetails>
      <MatButton Icon="multiline_chart" @onclick="@(async e => await SubmitShortestPath())"/>
      <p>@FindShortestPathsCorrelationId</p>
    </MatExpansionPanelDetails>
  </MatExpansionPanel>

  <MatExpansionPanel>
    <MatExpansionPanelSummary>
      <MatExpansionPanelHeader>Betweenness</MatExpansionPanelHeader>
    </MatExpansionPanelSummary>
    <MatExpansionPanelDetails>
      <MatButton Icon="bar_chart" @onclick="@(async e => await SubmitBetweenness())"/>
      <p>@BetweennessCorrelationId</p>
    </MatExpansionPanelDetails>
  </MatExpansionPanel>

  <MatExpansionPanel>
    <MatExpansionPanelSummary>
      <MatExpansionPanelHeader>Closeness</MatExpansionPanelHeader>
    </MatExpansionPanelSummary>
    <MatExpansionPanelDetails>
      <MatButton Icon="pie_chart" @onclick="@(async e => await SubmitCloseness())"/>
      <p>@ClosenessCorrelationId</p>
    </MatExpansionPanelDetails>
  </MatExpansionPanel>

  <MatExpansionPanel>
    <MatExpansionPanelSummary>
      <MatExpansionPanelHeader>Degree</MatExpansionPanelHeader>
    </MatExpansionPanelSummary>
    <MatExpansionPanelDetails>
      <MatButton Icon="table_chart" @onclick="@(async e => await SubmitDegree())"/>
      <p>@DegreeCorrelationId</p>
    </MatExpansionPanelDetails>
  </MatExpansionPanel>

</MatAccordion>

<MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseGraphs())">Back</MatButton>

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  [Parameter]
  public string RepositoryManagerName { get; set; }

  [Parameter]
  public string RepositoryManagerId { get; set; }

  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public string RepositoryId { get; set; }

  [Parameter]
  public string GraphName { get; set; }

  [Parameter]
  public string GraphId { get; set; }

  public Guid FindShortestPathsCorrelationId { get; set; } = Guid.Empty;
  public Guid BetweennessCorrelationId { get; set; } = Guid.Empty;
  public Guid ClosenessCorrelationId { get; set; } = Guid.Empty;
  public Guid DegreeCorrelationId { get; set; } = Guid.Empty;

  private async Task SubmitShortestPath()
  {
  // TODO     Contact
  // TODO     RootNodeId
  // TODO     GoalNodeId
    var req = new FindShortestPathsRequest
    {
      GraphId = Guid.Parse(GraphId),
      RootNodeId = Guid.NewGuid(),
      GoalNodeId = Guid.NewGuid()
    };
    FindShortestPathsCorrelationId = await _analysisServer.FindShortestPaths(req);
  }

  private async Task SubmitBetweenness()
  {
  // TODO     Contact
    var req = new BetweennessRequest
    {
      GraphId = Guid.Parse(GraphId)
    };
    BetweennessCorrelationId = await _analysisServer.Betweenness(req);
  }

  private async Task SubmitCloseness()
  {
  // TODO     Contact
    var req = new ClosenessRequest
    {
      GraphId = Guid.Parse(GraphId)
    };
    ClosenessCorrelationId = await _analysisServer.Closeness(req);
  }

  private async Task SubmitDegree()
  {
  // TODO     Contact
    var req = new DegreeRequest
    {
      GraphId = Guid.Parse(GraphId)
    };
    DegreeCorrelationId = await _analysisServer.Degree(req);
  }

  private void GotoBrowseGraphs()
  {
    _navMgr.NavigateTo($"/BrowseGraphs/{OrganisationId}/{OrganisationName}/{RepositoryManagerId}/{RepositoryManagerName}/{RepositoryId}/{RepositoryName}");
  }
}
