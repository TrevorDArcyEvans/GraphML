@page "/BrowseAnalyses/{GraphId}/{GraphName}"

@using Analysis.RankedShortestPath
@using Analysis.SNA.Centrality
@using GraphML;
@using System.Web;
@using GraphML.Interfaces.Server;
@using GraphML.API.Server;

@inject IAnalysisServer _analysisServer
@inject IGraphServer _graphServer;
@inject IRepositoryServer _repoServer;
@inject NavigationManager UriHelper

<h1>Analyses</h1>
@if (_repo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>@HttpUtility.UrlDecode(GraphName)</h2>
    <table class="table">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Name</th>
                <th scope="col">Analyse</th>
                <th scope="col">Correlation Id</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th>Find Shortest Paths</th>
                <th><span @onclick="@(async e => await SubmitShortestPath(_graph))" class="fas fa-bezier-curve" /></th>
                <th>@FindShortestPathsCorrelationId</th>
            </tr>
            <tr>
                <th>Betweenness</th>
                <th><span @onclick="@(async e => await SubmitBetweenness(_graph))" class="fas fa-retweet" /></th>
                <th>@BetweennessCorrelationId</th>
            </tr>
            <tr>
                <th>Closeness</th>
                <th><span @onclick="@(async e => await SubmitCloseness(_graph))" class="fas fa-clone" /></th>
                <th>@ClosenessCorrelationId</th>
            </tr>
            <tr>
                <th>Degree</th>
                <th><span @onclick="@(async e => await SubmitDegree(_graph))" class="fas fa-thermometer-three-quarters" /></th>
                <th>@DegreeCorrelationId</th>
            </tr>
        </tbody>
    </table>
    <button type="button" class="btn btn-primary" @onclick="@(e => GotoBrowseGraphs())">Back</button>
}

@functions
  {
    [Parameter]
    public string GraphName { get; set; }

    [Parameter]
    public string GraphId { get; set; }

    public Guid FindShortestPathsCorrelationId { get; set; } = Guid.Empty;
    public Guid BetweennessCorrelationId { get; set; } = Guid.Empty;
    public Guid ClosenessCorrelationId { get; set; } = Guid.Empty;
    public Guid DegreeCorrelationId { get; set; } = Guid.Empty;

    private Repository _repo;
    private Graph _graph;

    protected override async Task OnInitializedAsync()
    {
        _graph = (await _graphServer.ByIds(new[] { Guid.Parse(GraphId) })).Single();
        _repo = (await _repoServer.ByIds(new[] { _graph.RepositoryId })).Single();
    }

    private async Task SubmitShortestPath(Graph graph)
    {
        // TODO     Contact
        // TODO     RootNodeId
        // TODO     GoalNodeId
        var req = new FindShortestPathsRequest
        {
            GraphId = graph.Id,
            RootNodeId = Guid.NewGuid(),
            GoalNodeId = Guid.NewGuid()
        };
        FindShortestPathsCorrelationId = await _analysisServer.FindShortestPaths(req);
    }

    private async Task SubmitBetweenness(Graph graph)
    {
        // TODO     Contact
        var req = new BetweennessRequest
        {
            GraphId = graph.Id
        };
        BetweennessCorrelationId = await _analysisServer.Betweenness(req);
    }

    private async Task SubmitCloseness(Graph graph)
    {
        // TODO     Contact
        var req = new ClosenessRequest
        {
            GraphId = graph.Id
        };
        ClosenessCorrelationId = await _analysisServer.Closeness(req);
    }

    private async Task SubmitDegree(Graph graph)
    {
        // TODO     Contact
        var req = new DegreeRequest
        {
            GraphId = graph.Id
        };
        DegreeCorrelationId = await _analysisServer.Degree(req);
    }

    private void GotoBrowseGraphs()
    {
        UriHelper.NavigateTo($"/BrowseGraphs/{_repo.Id}/{_repo.Name}");
    }
}
