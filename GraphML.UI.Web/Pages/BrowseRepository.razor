@page "/BrowseRepository/{RepositoryName}/{RepositoryId}"

@using GraphML
@using GraphML.API.Server
@using System.Web;

@inject IRepositoryManagerServer _repoMgrServer
@inject IRepositoryServer _repoServer
@inject IGraphServer _graphServer
@inject NavigationManager UriHelper

<h1>Graphs</h1>
@if (_graphs == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <h2>@HttpUtility.UrlDecode(RepositoryName)</h2>
  <ul class="list-group">
    @foreach (var graph in _graphs)
    {
      <li class="list-group-item">
        <span @onclick="((e) => BrowseGraph(@graph))">@graph.Name</span>
      </li>
    }
  </ul>
  <button @onclick="((e) => BrowseRepositoryManager())">Back</button>
}

@functions
{
  [Parameter]
  public string RepositoryName { get; set; }

  [Parameter]
  public Guid RepositoryId { get; set; }

  private IEnumerable<Graph> _graphs;

  protected override async Task OnInitializedAsync()
  {
    _graphs = await _graphServer.ByOwners(new[] { RepositoryId });
  }

  private void BrowseGraph(Graph graph)
  {
    UriHelper.NavigateTo($"/BrowseGraph/{graph.Name}/{graph.Id}");
  }

  private async Task BrowseRepositoryManager()
  {
    var repo = (await _repoServer.ByIds(new[] { RepositoryId })).Single();
    var repoMgr = (await _repoMgrServer.ByIds(new[] { repo.OwnerId })).Single();
    UriHelper.NavigateTo($"/BrowseRepositoryManager/{repoMgr.Name}/{repoMgr.Id}");
  }
}
