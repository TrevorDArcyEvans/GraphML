@page "/BrowseRepositoryManagers/{OrganisationId}/{OrganisationName}"

@using GraphML
@using System.Web;
@using GraphML.Interfaces.Server

@inject IRepositoryManagerServer _repoMgrServer
@inject NavigationManager _navMgr

<h1>Repository Managers</h1>
@if (_repoMgrs == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <h2>@HttpUtility.UrlDecode(@OrganisationName)</h2>
  <table class="table">
    <thead class="thead-dark">
    <tr>
      <th scope="col">Name</th>
      <th scope="col">Repositories</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var repoMgr in _repoMgrs)
    {
      <tr>
        <th>@repoMgr.Name</th>
        <th>
          <MatButton @onclick="@(e => GotoBrowseRepositories(@repoMgr))" class="fas fa-project-diagram btn btn-primary"/>
        </th>
      </tr>
    }
    </tbody>
  </table>
  <div>
    <MatPaginator Length="@_totalEnts" PageSize="@_pageSize" Page="@OnPage"></MatPaginator>
  </div>
  <MatButton Icon="arrow_back" @onclick="@(e => GotoBrowseOrganisations())">Back</MatButton>
}

@functions
{
  [Parameter]
  public string OrganisationName { get; set; }

  [Parameter]
  public string OrganisationId { get; set; }

  private IEnumerable<RepositoryManager> _repoMgrs;
  int _totalEnts = 0;
  int _pageIndex = 0;
  int _pageSize = 25;

  protected override async Task OnInitializedAsync()
  {
    _totalEnts = await _repoMgrServer.Count(Guid.Parse(OrganisationId));
    _repoMgrs = await _repoMgrServer.ByOwners(new[] {Guid.Parse(OrganisationId)}, _pageIndex, _pageSize);
  }

  private async Task OnPage(MatPaginatorPageEvent e)
  {
    _pageSize = e.PageSize;
    _pageIndex = e.PageIndex;
    _repoMgrs = await _repoMgrServer.ByOwners(new[] {Guid.Parse(OrganisationId)}, _pageIndex, _pageSize);
  }

  private void GotoBrowseRepositories(RepositoryManager repoMgr)
  {
    _navMgr.NavigateTo($"/BrowseRepositories/{repoMgr.Id}/{repoMgr.Name}");
  }

  private void GotoBrowseOrganisations()
  {
    _navMgr.NavigateTo($"/BrowseOrganisations");
  }
}
